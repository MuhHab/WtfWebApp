//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System;
using global::System.ComponentModel;
using global::System.Data;
using global::System.Data.SqlClient;
using global::System.Collections.Generic;
using global::System.Linq;
using global::System.Threading.Tasks;
using global::System.Xml.Linq;
using global::Inedo.Data;

#pragma warning disable 1591
namespace TheDailyWtf.Data.StoredProcedures
{
	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class AdImpressions_GetImpressions
	{
		private DateTime? Start_Date;
		private DateTime? End_Date;
		public AdImpressions_GetImpressions(DateTime? Start_Date, DateTime? End_Date)
		{
			this.Start_Date = Start_Date;
			this.End_Date = End_Date;
		}
		public IList<Tables.AdImpressions> Execute() => DB.AdImpressions_GetImpressions(Start_Date, End_Date);
		public IEnumerable<Tables.AdImpressions> Enumerate() => (new DB.Context(false)).AdImpressions_GetImpressions(Start_Date, End_Date);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class AdImpressions_IncrementCount
	{
		private string Banner_Name;
		private DateTime? Impression_Date;
		private int? Impression_Count;
		public AdImpressions_IncrementCount(string Banner_Name, DateTime? Impression_Date, int? Impression_Count)
		{
			this.Banner_Name = Banner_Name;
			this.Impression_Date = Impression_Date;
			this.Impression_Count = Impression_Count;
		}
		public void Execute() => DB.AdImpressions_IncrementCount(Banner_Name, Impression_Date, Impression_Count);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class AdRedirectUrls_AddRedirectUrl
	{
		private string Redirect_Url;
		public AdRedirectUrls_AddRedirectUrl(string Redirect_Url)
		{
			this.Redirect_Url = Redirect_Url;
		}
		public void Execute() => DB.AdRedirectUrls_AddRedirectUrl(Redirect_Url);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class AdRedirectUrls_GetRedirectUrls
	{
		public AdRedirectUrls_GetRedirectUrls()
		{
		}
		public IList<Tables.AdRedirectUrls> Execute() => DB.AdRedirectUrls_GetRedirectUrls();
		public IEnumerable<Tables.AdRedirectUrls> Enumerate() => (new DB.Context(false)).AdRedirectUrls_GetRedirectUrls();
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class AdRedirectUrls_IncrementClickCount
	{
		private Guid? Ad_Guid;
		private int? Increment_Count;
		public AdRedirectUrls_IncrementClickCount(Guid? Ad_Guid, int? Increment_Count)
		{
			this.Ad_Guid = Ad_Guid;
			this.Increment_Count = Increment_Count;
		}
		public void Execute() => DB.AdRedirectUrls_IncrementClickCount(Ad_Guid, Increment_Count);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Ads_CreateOrUpdateAd
	{
		private string Ad_Html;
		private int? Ad_Id;
		public Ads_CreateOrUpdateAd(string Ad_Html, int? Ad_Id)
		{
			this.Ad_Html = Ad_Html;
			this.Ad_Id = Ad_Id;
		}
		public int? Execute() => DB.Ads_CreateOrUpdateAd(Ad_Html, Ad_Id);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Ads_DeleteAd
	{
		private int? Ad_Id;
		public Ads_DeleteAd(int? Ad_Id)
		{
			this.Ad_Id = Ad_Id;
		}
		public IList<Tables.Ads> Execute() => DB.Ads_DeleteAd(Ad_Id);
		public IEnumerable<Tables.Ads> Enumerate() => (new DB.Context(false)).Ads_DeleteAd(Ad_Id);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Ads_GetAds
	{
		public Ads_GetAds()
		{
		}
		public IList<Tables.Ads> Execute() => DB.Ads_GetAds();
		public IEnumerable<Tables.Ads> Enumerate() => (new DB.Context(false)).Ads_GetAds();
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_ApproveComment
	{
		private int? Article_Id;
		private int? Comment_Id;
		private YNIndicator? Valid_Indicator;
		public Articles_ApproveComment(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator)
		{
			this.Article_Id = Article_Id;
			this.Comment_Id = Comment_Id;
			this.Valid_Indicator = Valid_Indicator;
		}
		public YNIndicator? Execute() => DB.Articles_ApproveComment(Article_Id, Comment_Id, Valid_Indicator);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_CreateOrUpdateArticle
	{
		private int? Article_Id;
		private string Article_Slug;
		private DateTime? Published_Date;
		private string PublishedStatus_Name;
		private string Author_Slug;
		private string Title_Text;
		private string Series_Slug;
		private string Body_Html;
		private int? Discourse_Topic_Id;
		private string Discourse_Topic_Opened;
		public Articles_CreateOrUpdateArticle(int? Article_Id, string Article_Slug, DateTime? Published_Date, string PublishedStatus_Name, string Author_Slug, string Title_Text, string Series_Slug, string Body_Html, int? Discourse_Topic_Id, string Discourse_Topic_Opened)
		{
			this.Article_Id = Article_Id;
			this.Article_Slug = Article_Slug;
			this.Published_Date = Published_Date;
			this.PublishedStatus_Name = PublishedStatus_Name;
			this.Author_Slug = Author_Slug;
			this.Title_Text = Title_Text;
			this.Series_Slug = Series_Slug;
			this.Body_Html = Body_Html;
			this.Discourse_Topic_Id = Discourse_Topic_Id;
			this.Discourse_Topic_Opened = Discourse_Topic_Opened;
		}
		public int? Execute() => DB.Articles_CreateOrUpdateArticle(Article_Id, Article_Slug, Published_Date, PublishedStatus_Name, Author_Slug, Title_Text, Series_Slug, Body_Html, Discourse_Topic_Id, Discourse_Topic_Opened);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_DeleteArticle
	{
		private int? Article_Id;
		public Articles_DeleteArticle(int? Article_Id)
		{
			this.Article_Id = Article_Id;
		}
		public void Execute() => DB.Articles_DeleteArticle(Article_Id);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_FeatureComment
	{
		private int? Article_Id;
		private int? Comment_Id;
		private YNIndicator? Valid_Indicator;
		public Articles_FeatureComment(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator)
		{
			this.Article_Id = Article_Id;
			this.Comment_Id = Comment_Id;
			this.Valid_Indicator = Valid_Indicator;
		}
		public YNIndicator? Execute() => DB.Articles_FeatureComment(Article_Id, Comment_Id, Valid_Indicator);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_FixMissingAds
	{
		public Articles_FixMissingAds()
		{
		}
		public void Execute() => DB.Articles_FixMissingAds();
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_GetArticleById
	{
		private int? Article_Id;
		public Articles_GetArticleById(int? Article_Id)
		{
			this.Article_Id = Article_Id;
		}
		public Tables.Articles_Extended Execute() => DB.Articles_GetArticleById(Article_Id);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_GetArticleByLegacyPost
	{
		private int? Post_Id;
		public Articles_GetArticleByLegacyPost(int? Post_Id)
		{
			this.Post_Id = Post_Id;
		}
		public Tables.Articles_Extended Execute() => DB.Articles_GetArticleByLegacyPost(Post_Id);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_GetArticleBySlug
	{
		private string Article_Slug;
		public Articles_GetArticleBySlug(string Article_Slug)
		{
			this.Article_Slug = Article_Slug;
		}
		public Tables.Articles_Extended Execute() => DB.Articles_GetArticleBySlug(Article_Slug);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_GetArticles
	{
		private string Series_Slug;
		private string PublishedStatus_Name;
		private DateTime? RangeStart_Date;
		private DateTime? RangeEnd_Date;
		private string Author_Slug;
		public Articles_GetArticles(string Series_Slug, string PublishedStatus_Name, DateTime? RangeStart_Date, DateTime? RangeEnd_Date, string Author_Slug)
		{
			this.Series_Slug = Series_Slug;
			this.PublishedStatus_Name = PublishedStatus_Name;
			this.RangeStart_Date = RangeStart_Date;
			this.RangeEnd_Date = RangeEnd_Date;
			this.Author_Slug = Author_Slug;
		}
		public IList<Tables.Articles_Extended> Execute() => DB.Articles_GetArticles(Series_Slug, PublishedStatus_Name, RangeStart_Date, RangeEnd_Date, Author_Slug);
		public IEnumerable<Tables.Articles_Extended> Enumerate() => (new DB.Context(false)).Articles_GetArticles(Series_Slug, PublishedStatus_Name, RangeStart_Date, RangeEnd_Date, Author_Slug);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_GetFeaturedComments
	{
		private int? Article_Id;
		public Articles_GetFeaturedComments(int? Article_Id)
		{
			this.Article_Id = Article_Id;
		}
		public IList<Tables.Comments_Extended> Execute() => DB.Articles_GetFeaturedComments(Article_Id);
		public IEnumerable<Tables.Comments_Extended> Enumerate() => (new DB.Context(false)).Articles_GetFeaturedComments(Article_Id);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_GetOtherRecentArticles
	{
		private string PublishedStatus_Name;
		private int? Article_Count;
		public Articles_GetOtherRecentArticles(string PublishedStatus_Name, int? Article_Count)
		{
			this.PublishedStatus_Name = PublishedStatus_Name;
			this.Article_Count = Article_Count;
		}
		public IList<Tables.Articles_Extended> Execute() => DB.Articles_GetOtherRecentArticles(PublishedStatus_Name, Article_Count);
		public IEnumerable<Tables.Articles_Extended> Enumerate() => (new DB.Context(false)).Articles_GetOtherRecentArticles(PublishedStatus_Name, Article_Count);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_GetRandomArticle
	{
		public Articles_GetRandomArticle()
		{
		}
		public Tables.Articles_Extended Execute() => DB.Articles_GetRandomArticle();
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_GetRecentArticles
	{
		private string PublishedStatus_Name;
		private string Series_Slug;
		private string Author_Slug;
		private int? Article_Count;
		public Articles_GetRecentArticles(string PublishedStatus_Name, string Series_Slug, string Author_Slug, int? Article_Count)
		{
			this.PublishedStatus_Name = PublishedStatus_Name;
			this.Series_Slug = Series_Slug;
			this.Author_Slug = Author_Slug;
			this.Article_Count = Article_Count;
		}
		public IList<Tables.Articles_Extended> Execute() => DB.Articles_GetRecentArticles(PublishedStatus_Name, Series_Slug, Author_Slug, Article_Count);
		public IEnumerable<Tables.Articles_Extended> Enumerate() => (new DB.Context(false)).Articles_GetRecentArticles(PublishedStatus_Name, Series_Slug, Author_Slug, Article_Count);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_GetUnpublishedArticles
	{
		private string Author_Slug;
		public Articles_GetUnpublishedArticles(string Author_Slug)
		{
			this.Author_Slug = Author_Slug;
		}
		public IList<Tables.Articles_Extended> Execute() => DB.Articles_GetUnpublishedArticles(Author_Slug);
		public IEnumerable<Tables.Articles_Extended> Enumerate() => (new DB.Context(false)).Articles_GetUnpublishedArticles(Author_Slug);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Articles_UnfeatureComment
	{
		private int? Article_Id;
		private int? Comment_Id;
		private YNIndicator? Valid_Indicator;
		public Articles_UnfeatureComment(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator)
		{
			this.Article_Id = Article_Id;
			this.Comment_Id = Comment_Id;
			this.Valid_Indicator = Valid_Indicator;
		}
		public YNIndicator? Execute() => DB.Articles_UnfeatureComment(Article_Id, Comment_Id, Valid_Indicator);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Authors_CreateOrUpdateAuthor
	{
		private string Author_Slug;
		private string Display_Name;
		private YNIndicator? Admin_Indicator;
		private string Bio_Html;
		private string ShortBio_Text;
		private string Image_Url;
		private YNIndicator? Active_Indicator;
		public Authors_CreateOrUpdateAuthor(string Author_Slug, string Display_Name, YNIndicator? Admin_Indicator, string Bio_Html, string ShortBio_Text, string Image_Url, YNIndicator? Active_Indicator)
		{
			this.Author_Slug = Author_Slug;
			this.Display_Name = Display_Name;
			this.Admin_Indicator = Admin_Indicator;
			this.Bio_Html = Bio_Html;
			this.ShortBio_Text = ShortBio_Text;
			this.Image_Url = Image_Url;
			this.Active_Indicator = Active_Indicator;
		}
		public void Execute() => DB.Authors_CreateOrUpdateAuthor(Author_Slug, Display_Name, Admin_Indicator, Bio_Html, ShortBio_Text, Image_Url, Active_Indicator);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Authors_GetAuthorBySlug
	{
		private string Author_Slug;
		public Authors_GetAuthorBySlug(string Author_Slug)
		{
			this.Author_Slug = Author_Slug;
		}
		public Tables.Authors Execute() => DB.Authors_GetAuthorBySlug(Author_Slug);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Authors_GetAuthors
	{
		public Authors_GetAuthors()
		{
		}
		public IList<Tables.Authors> Execute() => DB.Authors_GetAuthors();
		public IEnumerable<Tables.Authors> Enumerate() => (new DB.Context(false)).Authors_GetAuthors();
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Authors_SetPassword
	{
		private string Author_Slug;
		private string Password_Text;
		public Authors_SetPassword(string Author_Slug, string Password_Text)
		{
			this.Author_Slug = Author_Slug;
			this.Password_Text = Password_Text;
		}
		public void Execute() => DB.Authors_SetPassword(Author_Slug, Password_Text);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Authors_ValidateLogin
	{
		private string Author_Slug;
		private string Password_Text;
		private YNIndicator? Valid_Indicator;
		public Authors_ValidateLogin(string Author_Slug, string Password_Text, YNIndicator? Valid_Indicator)
		{
			this.Author_Slug = Author_Slug;
			this.Password_Text = Password_Text;
			this.Valid_Indicator = Valid_Indicator;
		}
		public YNIndicator? Execute() => DB.Authors_ValidateLogin(Author_Slug, Password_Text, Valid_Indicator);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Comments_CountCommentsByIP
	{
		private string User_IP;
		private int? Comments_Count;
		public Comments_CountCommentsByIP(string User_IP, int? Comments_Count)
		{
			this.User_IP = User_IP;
			this.Comments_Count = Comments_Count;
		}
		public int? Execute() => DB.Comments_CountCommentsByIP(User_IP, Comments_Count);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Comments_CountCommentsByToken
	{
		private string User_Token;
		private int? Comments_Count;
		public Comments_CountCommentsByToken(string User_Token, int? Comments_Count)
		{
			this.User_Token = User_Token;
			this.Comments_Count = Comments_Count;
		}
		public int? Execute() => DB.Comments_CountCommentsByToken(User_Token, Comments_Count);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Comments_CountHiddenComments
	{
		private string Author_Slug;
		private int? Comments_Count;
		public Comments_CountHiddenComments(string Author_Slug, int? Comments_Count)
		{
			this.Author_Slug = Author_Slug;
			this.Comments_Count = Comments_Count;
		}
		public int? Execute() => DB.Comments_CountHiddenComments(Author_Slug, Comments_Count);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Comments_CreateOrUpdateComment
	{
		private int? Comment_Id;
		private int? Article_Id;
		private string Body_Html;
		private string User_Name;
		private DateTime? Posted_Date;
		private string User_IP;
		private string User_Token;
		private int? Parent_Comment_Id;
		private YNIndicator? Hidden_Indicator;
		public Comments_CreateOrUpdateComment(int? Comment_Id, int? Article_Id, string Body_Html, string User_Name, DateTime? Posted_Date, string User_IP, string User_Token, int? Parent_Comment_Id, YNIndicator? Hidden_Indicator)
		{
			this.Comment_Id = Comment_Id;
			this.Article_Id = Article_Id;
			this.Body_Html = Body_Html;
			this.User_Name = User_Name;
			this.Posted_Date = Posted_Date;
			this.User_IP = User_IP;
			this.User_Token = User_Token;
			this.Parent_Comment_Id = Parent_Comment_Id;
			this.Hidden_Indicator = Hidden_Indicator;
		}
		public int? Execute() => DB.Comments_CreateOrUpdateComment(Comment_Id, Article_Id, Body_Html, User_Name, Posted_Date, User_IP, User_Token, Parent_Comment_Id, Hidden_Indicator);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Comments_DeleteComments
	{
		private string CommentIds_Csv;
		public Comments_DeleteComments(string CommentIds_Csv)
		{
			this.CommentIds_Csv = CommentIds_Csv;
		}
		public void Execute() => DB.Comments_DeleteComments(CommentIds_Csv);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Comments_GetCommentById
	{
		private int? Comment_Id;
		public Comments_GetCommentById(int? Comment_Id)
		{
			this.Comment_Id = Comment_Id;
		}
		public IList<Tables.Comments_Extended> Execute() => DB.Comments_GetCommentById(Comment_Id);
		public IEnumerable<Tables.Comments_Extended> Enumerate() => (new DB.Context(false)).Comments_GetCommentById(Comment_Id);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Comments_GetCommentIndex
	{
		private int? Comment_Id;
		private int? Comment_Index;
		public Comments_GetCommentIndex(int? Comment_Id, int? Comment_Index)
		{
			this.Comment_Id = Comment_Id;
			this.Comment_Index = Comment_Index;
		}
		public int? Execute() => DB.Comments_GetCommentIndex(Comment_Id, Comment_Index);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Comments_GetComments
	{
		private int? Article_Id;
		private int? Skip_Count;
		private int? Limit_Count;
		public Comments_GetComments(int? Article_Id, int? Skip_Count, int? Limit_Count)
		{
			this.Article_Id = Article_Id;
			this.Skip_Count = Skip_Count;
			this.Limit_Count = Limit_Count;
		}
		public IList<Tables.Comments_Extended> Execute() => DB.Comments_GetComments(Article_Id, Skip_Count, Limit_Count);
		public IEnumerable<Tables.Comments_Extended> Enumerate() => (new DB.Context(false)).Comments_GetComments(Article_Id, Skip_Count, Limit_Count);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Comments_GetCommentsByIP
	{
		private string User_IP;
		private int? Skip_Count;
		private int? Limit_Count;
		public Comments_GetCommentsByIP(string User_IP, int? Skip_Count, int? Limit_Count)
		{
			this.User_IP = User_IP;
			this.Skip_Count = Skip_Count;
			this.Limit_Count = Limit_Count;
		}
		public IList<Tables.Comments_Extended> Execute() => DB.Comments_GetCommentsByIP(User_IP, Skip_Count, Limit_Count);
		public IEnumerable<Tables.Comments_Extended> Enumerate() => (new DB.Context(false)).Comments_GetCommentsByIP(User_IP, Skip_Count, Limit_Count);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Comments_GetCommentsByToken
	{
		private string User_Token;
		private int? Skip_Count;
		private int? Limit_Count;
		public Comments_GetCommentsByToken(string User_Token, int? Skip_Count, int? Limit_Count)
		{
			this.User_Token = User_Token;
			this.Skip_Count = Skip_Count;
			this.Limit_Count = Limit_Count;
		}
		public IList<Tables.Comments_Extended> Execute() => DB.Comments_GetCommentsByToken(User_Token, Skip_Count, Limit_Count);
		public IEnumerable<Tables.Comments_Extended> Enumerate() => (new DB.Context(false)).Comments_GetCommentsByToken(User_Token, Skip_Count, Limit_Count);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Comments_GetHiddenComments
	{
		private string Author_Slug;
		private int? Skip_Count;
		private int? Limit_Count;
		public Comments_GetHiddenComments(string Author_Slug, int? Skip_Count, int? Limit_Count)
		{
			this.Author_Slug = Author_Slug;
			this.Skip_Count = Skip_Count;
			this.Limit_Count = Limit_Count;
		}
		public IList<Tables.Comments_Extended> Execute() => DB.Comments_GetHiddenComments(Author_Slug, Skip_Count, Limit_Count);
		public IEnumerable<Tables.Comments_Extended> Enumerate() => (new DB.Context(false)).Comments_GetHiddenComments(Author_Slug, Skip_Count, Limit_Count);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Comments_UserHasApprovedComment
	{
		private string User_IP;
		private string User_Token;
		private YNIndicator? Exists_Indicator;
		public Comments_UserHasApprovedComment(string User_IP, string User_Token, YNIndicator? Exists_Indicator)
		{
			this.User_IP = User_IP;
			this.User_Token = User_Token;
			this.Exists_Indicator = Exists_Indicator;
		}
		public YNIndicator? Execute() => DB.Comments_UserHasApprovedComment(User_IP, User_Token, Exists_Indicator);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Series_CreateOrUpdateSeries
	{
		private string Series_Slug;
		private string Title_Text;
		private string Description_Text;
		public Series_CreateOrUpdateSeries(string Series_Slug, string Title_Text, string Description_Text)
		{
			this.Series_Slug = Series_Slug;
			this.Title_Text = Title_Text;
			this.Description_Text = Description_Text;
		}
		public void Execute() => DB.Series_CreateOrUpdateSeries(Series_Slug, Title_Text, Description_Text);
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Series_GetSeries
	{
		public Series_GetSeries()
		{
		}
		public IList<Tables.Series> Execute() => DB.Series_GetSeries();
		public IEnumerable<Tables.Series> Enumerate() => (new DB.Context(false)).Series_GetSeries();
	}

	/// <summary>
	/// 
	/// </summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public class Series_GetSeriesBySlug
	{
		private string Series_Slug;
		public Series_GetSeriesBySlug(string Series_Slug)
		{
			this.Series_Slug = Series_Slug;
		}
		public Tables.Series Execute() => DB.Series_GetSeriesBySlug(Series_Slug);
	}

}
namespace TheDailyWtf.Data
{
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static partial class StoredProcs
	{
		public static StoredProcedures.AdImpressions_GetImpressions AdImpressions_GetImpressions(DateTime? Start_Date = null, DateTime? End_Date = null) => new StoredProcedures.AdImpressions_GetImpressions(Start_Date, End_Date);

		public static StoredProcedures.AdImpressions_IncrementCount AdImpressions_IncrementCount(string Banner_Name, DateTime? Impression_Date, int? Impression_Count) => new StoredProcedures.AdImpressions_IncrementCount(Banner_Name, Impression_Date, Impression_Count);

		public static StoredProcedures.AdRedirectUrls_AddRedirectUrl AdRedirectUrls_AddRedirectUrl(string Redirect_Url) => new StoredProcedures.AdRedirectUrls_AddRedirectUrl(Redirect_Url);

		public static StoredProcedures.AdRedirectUrls_GetRedirectUrls AdRedirectUrls_GetRedirectUrls() => new StoredProcedures.AdRedirectUrls_GetRedirectUrls();

		public static StoredProcedures.AdRedirectUrls_IncrementClickCount AdRedirectUrls_IncrementClickCount(Guid? Ad_Guid, int? Increment_Count) => new StoredProcedures.AdRedirectUrls_IncrementClickCount(Ad_Guid, Increment_Count);

		public static StoredProcedures.Ads_CreateOrUpdateAd Ads_CreateOrUpdateAd(string Ad_Html, int? Ad_Id = null) => new StoredProcedures.Ads_CreateOrUpdateAd(Ad_Html, Ad_Id);

		public static StoredProcedures.Ads_DeleteAd Ads_DeleteAd(int? Ad_Id) => new StoredProcedures.Ads_DeleteAd(Ad_Id);

		public static StoredProcedures.Ads_GetAds Ads_GetAds() => new StoredProcedures.Ads_GetAds();

		public static StoredProcedures.Articles_ApproveComment Articles_ApproveComment(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator = null) => new StoredProcedures.Articles_ApproveComment(Article_Id, Comment_Id, Valid_Indicator);

		public static StoredProcedures.Articles_CreateOrUpdateArticle Articles_CreateOrUpdateArticle(int? Article_Id, string Article_Slug = null, DateTime? Published_Date = null, string PublishedStatus_Name = null, string Author_Slug = null, string Title_Text = null, string Series_Slug = null, string Body_Html = null, int? Discourse_Topic_Id = null, string Discourse_Topic_Opened = null) => new StoredProcedures.Articles_CreateOrUpdateArticle(Article_Id, Article_Slug, Published_Date, PublishedStatus_Name, Author_Slug, Title_Text, Series_Slug, Body_Html, Discourse_Topic_Id, Discourse_Topic_Opened);

		public static StoredProcedures.Articles_DeleteArticle Articles_DeleteArticle(int? Article_Id) => new StoredProcedures.Articles_DeleteArticle(Article_Id);

		public static StoredProcedures.Articles_FeatureComment Articles_FeatureComment(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator = null) => new StoredProcedures.Articles_FeatureComment(Article_Id, Comment_Id, Valid_Indicator);

		public static StoredProcedures.Articles_FixMissingAds Articles_FixMissingAds() => new StoredProcedures.Articles_FixMissingAds();

		public static StoredProcedures.Articles_GetArticleById Articles_GetArticleById(int? Article_Id) => new StoredProcedures.Articles_GetArticleById(Article_Id);

		public static StoredProcedures.Articles_GetArticleByLegacyPost Articles_GetArticleByLegacyPost(int? Post_Id) => new StoredProcedures.Articles_GetArticleByLegacyPost(Post_Id);

		public static StoredProcedures.Articles_GetArticleBySlug Articles_GetArticleBySlug(string Article_Slug) => new StoredProcedures.Articles_GetArticleBySlug(Article_Slug);

		public static StoredProcedures.Articles_GetArticles Articles_GetArticles(string Series_Slug, string PublishedStatus_Name, DateTime? RangeStart_Date, DateTime? RangeEnd_Date, string Author_Slug = null) => new StoredProcedures.Articles_GetArticles(Series_Slug, PublishedStatus_Name, RangeStart_Date, RangeEnd_Date, Author_Slug);

		public static StoredProcedures.Articles_GetFeaturedComments Articles_GetFeaturedComments(int? Article_Id) => new StoredProcedures.Articles_GetFeaturedComments(Article_Id);

		public static StoredProcedures.Articles_GetOtherRecentArticles Articles_GetOtherRecentArticles(string PublishedStatus_Name, int? Article_Count = null) => new StoredProcedures.Articles_GetOtherRecentArticles(PublishedStatus_Name, Article_Count);

		public static StoredProcedures.Articles_GetRandomArticle Articles_GetRandomArticle() => new StoredProcedures.Articles_GetRandomArticle();

		public static StoredProcedures.Articles_GetRecentArticles Articles_GetRecentArticles(string PublishedStatus_Name, string Series_Slug = null, string Author_Slug = null, int? Article_Count = null) => new StoredProcedures.Articles_GetRecentArticles(PublishedStatus_Name, Series_Slug, Author_Slug, Article_Count);

		public static StoredProcedures.Articles_GetUnpublishedArticles Articles_GetUnpublishedArticles(string Author_Slug = null) => new StoredProcedures.Articles_GetUnpublishedArticles(Author_Slug);

		public static StoredProcedures.Articles_UnfeatureComment Articles_UnfeatureComment(int? Article_Id, int? Comment_Id, YNIndicator? Valid_Indicator = null) => new StoredProcedures.Articles_UnfeatureComment(Article_Id, Comment_Id, Valid_Indicator);

		public static StoredProcedures.Authors_CreateOrUpdateAuthor Authors_CreateOrUpdateAuthor(string Author_Slug, string Display_Name, YNIndicator? Admin_Indicator, string Bio_Html, string ShortBio_Text, string Image_Url, YNIndicator? Active_Indicator) => new StoredProcedures.Authors_CreateOrUpdateAuthor(Author_Slug, Display_Name, Admin_Indicator, Bio_Html, ShortBio_Text, Image_Url, Active_Indicator);

		public static StoredProcedures.Authors_GetAuthorBySlug Authors_GetAuthorBySlug(string Author_Slug) => new StoredProcedures.Authors_GetAuthorBySlug(Author_Slug);

		public static StoredProcedures.Authors_GetAuthors Authors_GetAuthors() => new StoredProcedures.Authors_GetAuthors();

		public static StoredProcedures.Authors_SetPassword Authors_SetPassword(string Author_Slug, string Password_Text) => new StoredProcedures.Authors_SetPassword(Author_Slug, Password_Text);

		public static StoredProcedures.Authors_ValidateLogin Authors_ValidateLogin(string Author_Slug, string Password_Text, YNIndicator? Valid_Indicator = null) => new StoredProcedures.Authors_ValidateLogin(Author_Slug, Password_Text, Valid_Indicator);

		public static StoredProcedures.Comments_CountCommentsByIP Comments_CountCommentsByIP(string User_IP, int? Comments_Count = null) => new StoredProcedures.Comments_CountCommentsByIP(User_IP, Comments_Count);

		public static StoredProcedures.Comments_CountCommentsByToken Comments_CountCommentsByToken(string User_Token, int? Comments_Count = null) => new StoredProcedures.Comments_CountCommentsByToken(User_Token, Comments_Count);

		public static StoredProcedures.Comments_CountHiddenComments Comments_CountHiddenComments(string Author_Slug = null, int? Comments_Count = null) => new StoredProcedures.Comments_CountHiddenComments(Author_Slug, Comments_Count);

		public static StoredProcedures.Comments_CreateOrUpdateComment Comments_CreateOrUpdateComment(int? Comment_Id, int? Article_Id, string Body_Html, string User_Name, DateTime? Posted_Date, string User_IP, string User_Token, int? Parent_Comment_Id = null, YNIndicator? Hidden_Indicator = null) => new StoredProcedures.Comments_CreateOrUpdateComment(Comment_Id, Article_Id, Body_Html, User_Name, Posted_Date, User_IP, User_Token, Parent_Comment_Id, Hidden_Indicator);

		public static StoredProcedures.Comments_DeleteComments Comments_DeleteComments(string CommentIds_Csv) => new StoredProcedures.Comments_DeleteComments(CommentIds_Csv);

		public static StoredProcedures.Comments_GetCommentById Comments_GetCommentById(int? Comment_Id) => new StoredProcedures.Comments_GetCommentById(Comment_Id);

		public static StoredProcedures.Comments_GetCommentIndex Comments_GetCommentIndex(int? Comment_Id, int? Comment_Index = null) => new StoredProcedures.Comments_GetCommentIndex(Comment_Id, Comment_Index);

		public static StoredProcedures.Comments_GetComments Comments_GetComments(int? Article_Id, int? Skip_Count = null, int? Limit_Count = null) => new StoredProcedures.Comments_GetComments(Article_Id, Skip_Count, Limit_Count);

		public static StoredProcedures.Comments_GetCommentsByIP Comments_GetCommentsByIP(string User_IP, int? Skip_Count = null, int? Limit_Count = null) => new StoredProcedures.Comments_GetCommentsByIP(User_IP, Skip_Count, Limit_Count);

		public static StoredProcedures.Comments_GetCommentsByToken Comments_GetCommentsByToken(string User_Token, int? Skip_Count = null, int? Limit_Count = null) => new StoredProcedures.Comments_GetCommentsByToken(User_Token, Skip_Count, Limit_Count);

		public static StoredProcedures.Comments_GetHiddenComments Comments_GetHiddenComments(string Author_Slug = null, int? Skip_Count = null, int? Limit_Count = null) => new StoredProcedures.Comments_GetHiddenComments(Author_Slug, Skip_Count, Limit_Count);

		public static StoredProcedures.Comments_UserHasApprovedComment Comments_UserHasApprovedComment(string User_IP, string User_Token, YNIndicator? Exists_Indicator = null) => new StoredProcedures.Comments_UserHasApprovedComment(User_IP, User_Token, Exists_Indicator);

		public static StoredProcedures.Series_CreateOrUpdateSeries Series_CreateOrUpdateSeries(string Series_Slug, string Title_Text, string Description_Text = null) => new StoredProcedures.Series_CreateOrUpdateSeries(Series_Slug, Title_Text, Description_Text);

		public static StoredProcedures.Series_GetSeries Series_GetSeries() => new StoredProcedures.Series_GetSeries();

		public static StoredProcedures.Series_GetSeriesBySlug Series_GetSeriesBySlug(string Series_Slug) => new StoredProcedures.Series_GetSeriesBySlug(Series_Slug);

	}
}
#pragma warning restore 1591
